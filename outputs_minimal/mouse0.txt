-----TRAINING
---SEARCH FOR BEST SPA(s)
nb_iterations , gamma, include_prev_context, handle_N_setting, ratio, ensemble type, num_threads, time taken, accuracy
1, 0.1, False, remove, 0.0, entropy, 64, 0.212, 70.62
1, 0.5, False, remove, 0.0, entropy, 64, 0.307, 71.98
1, 0.33, False, remove, 0.0, entropy, 64, 0.406, 71.48
1, 0.75, False, remove, 0.0, entropy, 64, 0.498, 72.96
1, 1.0, False, remove, 0.0, entropy, 64, 0.596, 73.46
1, 3.0, False, remove, 0.0, entropy, 64, 0.686, 74.20
1, 5.0, False, remove, 0.0, entropy, 64, 0.787, 74.69
3, 0.1, False, remove, 0.0, entropy, 64, 0.507, 72.22
3, 0.5, False, remove, 0.0, entropy, 64, 0.618, 72.84
3, 0.33, False, remove, 0.0, entropy, 64, 0.729, 71.98
3, 0.75, False, remove, 0.0, entropy, 64, 0.838, 72.96
3, 1.0, False, remove, 0.0, entropy, 64, 0.934, 74.44
3, 3.0, False, remove, 0.0, entropy, 64, 1.028, 76.30
3, 5.0, False, remove, 0.0, entropy, 64, 1.175, 77.28
5, 0.1, False, remove, 0.0, entropy, 64, 0.421, 72.47
5, 0.5, False, remove, 0.0, entropy, 64, 0.524, 73.95
5, 0.33, False, remove, 0.0, entropy, 64, 0.618, 73.46
5, 0.75, False, remove, 0.0, entropy, 64, 0.715, 74.57
5, 1.0, False, remove, 0.0, entropy, 64, 0.811, 75.68
5, 3.0, False, remove, 0.0, entropy, 64, 0.904, 77.78
5, 5.0, False, remove, 0.0, entropy, 64, 1.004, 78.27
7, 0.1, False, remove, 0.0, entropy, 64, 0.429, 72.22
7, 0.5, False, remove, 0.0, entropy, 64, 0.527, 74.81
7, 0.33, False, remove, 0.0, entropy, 64, 0.628, 74.44
7, 0.75, False, remove, 0.0, entropy, 64, 0.744, 75.19
7, 1.0, False, remove, 0.0, entropy, 64, 0.855, 75.43
7, 3.0, False, remove, 0.0, entropy, 64, 0.968, 77.28
7, 5.0, False, remove, 0.0, entropy, 64, 1.060, 77.28
10, 0.1, False, remove, 0.0, entropy, 64, 0.542, 72.10
10, 0.5, False, remove, 0.0, entropy, 64, 0.647, 73.83
10, 0.33, False, remove, 0.0, entropy, 64, 0.764, 72.84
10, 0.75, False, remove, 0.0, entropy, 64, 0.872, 75.43
10, 1.0, False, remove, 0.0, entropy, 64, 0.970, 75.80
10, 3.0, False, remove, 0.0, entropy, 64, 1.072, 77.04
10, 5.0, False, remove, 0.0, entropy, 64, 1.175, 77.28
---BEST SPA(s) FOUND
Best hyperparameters: {'INCLUDE_PREV_CONTEXT': False, 'GAMMA': 5.0, 'NB_TRAIN_ITERATIONS': 5, 'HANDLE_N_SETTING': 'remove', 'RATIO_PRETRAIN_TRAIN': 0.0, 'ENSEMBLE_TYPE': 'entropy', 'NUM_THREADS': 64, 'TRAINING_TIME': 1.0041456129401922, 'VALIDATION ACCURACY': 0.782716049382716}
-----TESTING
Final accuracy with best hyperparameters: 75.19
Mem in MB: 4.75
Mem in MB: 4.69
-----TIME PROFILING+
Read train + val data time:  0.15039
Number of training symbols: 654278
Length of one training sequence: 101
Total training time: 10.465 seconds
Number of test sequences: 810
Length of test sequence: 101
Read test data time:  0.00528
Total inference time: 0.364 seconds
Inference time/symbol: 4.446638019247986e-06 seconds
-----MEMORY REPORT
Filename: /data/home/nsagan/LZ-Genomics/Train.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   229    138.0 MiB    138.0 MiB           1   @profile
   230                                         def main(dataset_folder, pretrain_file):
   231                                             global INCLUDE_PREV_CONTEXT
   232                                             global GAMMA
   233                                             global NB_TRAIN_ITERATIONS 
   234                                             global HANDLE_N_SETTING 
   235                                             global RATIO_PRETRAIN_TRAIN 
   236                                             global ENSEMBLE_TYPE 
   237                                             global NUM_THREADS
   238                                             
   239                                             global include_prev_contexts
   240                                             global gammas 
   241                                             global nb_train_iterations 
   242                                             global handle_N_settings 
   243                                             global ratio_pretrain_train
   244                                             global ensemble_type
   245                                             global num_threads
   246                                         
   247    138.0 MiB      0.0 MiB           1       read_data_in_time = time.perf_counter()
   248                                             
   249                                             # Read train, val, test data 
   250    138.0 MiB      0.0 MiB           1       train_path = f"{dataset_folder}/train.csv"
   251    138.0 MiB      0.0 MiB           1       val_path = f"{dataset_folder}/dev.csv"
   252    138.0 MiB      0.0 MiB           1       test_path = f"{dataset_folder}/test.csv"
   253                                             
   254                                         
   255    140.4 MiB      2.4 MiB           1       train_data = pd.read_csv(train_path)
   256    140.7 MiB      0.2 MiB           1       validation_data = pd.read_csv(val_path)
   257                                             
   258    140.7 MiB      0.0 MiB           1       ALPHABET_SIZE = 4
   259    141.1 MiB      0.4 MiB           1       unique_labels = train_data['label'].unique()
   260                                             
   261    236.6 MiB      0.0 MiB           2       with open(pretrain_file, 'r') as file:
   262    236.6 MiB     95.5 MiB           1           pretrain_data = file.read()
   263                                             
   264                                             # Train all SPAs using all possible combinations of hyperparams
   265                                             # Test all on validation set, return best SPA
   266    236.6 MiB      0.0 MiB           1       results_df = pd.DataFrame(columns=[
   267                                             "INCLUDE_PREV_CONTEXT", "GAMMA", "NB_TRAIN_ITERATIONS", 
   268                                             "HANDLE_N_SETTING", "RATIO_PRETRAIN_TRAIN", "ENSEMBLE_TYPE", "NUM_THREADS", "VALIDATION ACCURACY"
   269                                             ])
   270                                         
   271    236.6 MiB      0.0 MiB           1       print("-----TRAINING")
   272    236.6 MiB      0.0 MiB           1       print("---SEARCH FOR BEST SPA(s)")
   273    236.6 MiB      0.0 MiB           1       print("nb_iterations , gamma, include_prev_context, handle_N_setting, ratio, ensemble type, num_threads, time taken, accuracy", flush=True)
   274    236.6 MiB      0.0 MiB           1       train_start_time = time.perf_counter()
   275    280.3 MiB      0.0 MiB           3       for include_prev_context, handle_N_setting, ratio in itertools.product(
   276    236.6 MiB      0.0 MiB           1           include_prev_contexts, handle_N_settings, ratio_pretrain_train
   277                                             ):  
   278    236.6 MiB      0.0 MiB           1           INCLUDE_PREV_CONTEXT = include_prev_context
   279    236.6 MiB      0.0 MiB           1           GAMMA = gammas
   280    236.6 MiB      0.0 MiB           1           NB_TRAIN_ITERATIONS = 0
   281    236.6 MiB      0.0 MiB           1           HANDLE_N_SETTING = handle_N_setting
   282    236.6 MiB      0.0 MiB           1           RATIO_PRETRAIN_TRAIN = ratio 
   283    236.6 MiB      0.0 MiB           1           ENSEMBLE_TYPE = ensemble_type
   284    236.6 MiB      0.0 MiB           1           NUM_THREADS = num_threads
   285                                                 
   286    239.0 MiB      2.4 MiB           1           train_data = handle_N(train_data, setting=HANDLE_N_SETTING)
   287    239.0 MiB      0.0 MiB           1           validation_data = handle_N(validation_data)
   288    239.0 MiB      0.0 MiB           1           nb_train_seqs = len(train_data)
   289    239.0 MiB      0.0 MiB           1           seq_len = len(train_data.iloc[0, 0])
   290    239.0 MiB      0.0 MiB           1           nb_train_symbols = nb_train_seqs * seq_len
   291                                                 
   292                                                 # Create list of spas based on number of labels: (spa_0 and spa_1 for labels 0, 1)
   293    239.0 MiB      0.0 MiB           5           spa = [LZ78SPA(alphabet_size=ALPHABET_SIZE, compute_training_loss=False) for _ in unique_labels]
   294    239.0 MiB      0.0 MiB           3           for i in range(len(unique_labels)):
   295    239.0 MiB      0.0 MiB           4               spa[i].set_inference_config(
   296    239.0 MiB      0.0 MiB           2                   lb=1e-5,
   297    239.0 MiB      0.0 MiB           2                   ensemble_type="entropy",
   298    239.0 MiB      0.0 MiB           2                   ensemble_n=10,
   299    239.0 MiB      0.0 MiB           2                   backshift_parsing=True,
   300    239.0 MiB      0.0 MiB           2                   backshift_ctx_len=20,
   301    239.0 MiB      0.0 MiB           2                   backshift_break_at_phrase=True
   302                                                     )
   303                                         
   304    239.0 MiB      0.0 MiB           1           nb_pretrain_symbols = math.ceil(RATIO_PRETRAIN_TRAIN * nb_train_symbols)
   305    239.0 MiB      0.0 MiB           1           pretrain_spa(pretrain_data, spa, nb_pretrain_symbols) 
   306                                         
   307    239.0 MiB      0.0 MiB           1           iterated_times = 0
   308    280.3 MiB     -0.2 MiB           6           for nb_iterations in nb_train_iterations:
   309    274.8 MiB      0.0 MiB           5               train_one_iter_start_time = time.perf_counter()
   310    280.2 MiB      0.0 MiB          15               for _ in range(nb_iterations - iterated_times):
   311    280.2 MiB     36.4 MiB          10                   train_spa_oneIter(train_data, spa)
   312                                                     
   313    280.2 MiB      0.0 MiB           5               iterated_times = nb_iterations
   314    280.3 MiB     -1.6 MiB          40               for gamma in gammas:
   315    280.3 MiB     -3.7 MiB          70                   for ensemble in ENSEMBLE_TYPE:
   316                                                         # Test on validation test to assess this combination of hyperparams
   317    280.3 MiB     -4.8 MiB         105                       for index in range(len(spa)):
   318    280.3 MiB     -3.2 MiB          70                           spa[index].set_inference_config(gamma=gamma, ensemble_type=ensemble)
   319    280.3 MiB      1.2 MiB          35                       accuracy = test_seq(validation_data, spa, num_threads)
   320    280.3 MiB     -2.5 MiB          35                       train_one_iter_end_time = time.perf_counter()
   321    280.3 MiB     -2.5 MiB          35                       train_one_iter_duration = train_one_iter_end_time - train_one_iter_start_time
   322    280.3 MiB     -2.5 MiB          35                       print(f"{nb_iterations}, {gamma}, {include_prev_context}, {handle_N_setting}, {ratio}, {ensemble}, {NUM_THREADS}, {train_one_iter_duration:.3f}, {(accuracy * 100):.2f}", flush=True)
   323                                         
   324                                                         
   325                                                         
   326    280.3 MiB     -4.5 MiB          70                       current_result = pd.DataFrame([{
   327    280.3 MiB     -2.5 MiB          35                           "INCLUDE_PREV_CONTEXT": INCLUDE_PREV_CONTEXT,
   328    280.3 MiB     -2.5 MiB          35                           "GAMMA": gamma,
   329    280.3 MiB     -2.5 MiB          35                           "NB_TRAIN_ITERATIONS": nb_iterations,
   330    280.3 MiB     -2.5 MiB          35                           "HANDLE_N_SETTING": HANDLE_N_SETTING,
   331    280.3 MiB     -2.5 MiB          35                           "RATIO_PRETRAIN_TRAIN": RATIO_PRETRAIN_TRAIN,
   332    280.3 MiB     -2.3 MiB          35                           "ENSEMBLE_TYPE": ensemble,
   333    280.3 MiB     -2.3 MiB          35                           "NUM_THREADS": NUM_THREADS,
   334    280.3 MiB     -2.3 MiB          35                           "TRAINING_TIME": train_one_iter_duration, 
   335    280.3 MiB     -2.3 MiB          35                           "VALIDATION ACCURACY": accuracy
   336                                                             }])
   337                                         
   338                                                         # Concatenate the current result with results_df
   339    280.3 MiB     -1.7 MiB          35                   results_df = results_df.dropna(axis=1, how='all')
   340    280.3 MiB     -1.6 MiB          35                   current_result = current_result.dropna(axis=1, how='all')
   341                                         
   342    280.3 MiB     -1.1 MiB          35                   results_df = pd.concat([results_df, current_result], ignore_index=True)
   343                                         
   344                                             
   345                                             # Find the best hyperparameter combination based on the highest accuracy
   346    280.3 MiB      0.0 MiB           1       print("---BEST SPA(s) FOUND")
   347    280.3 MiB      0.0 MiB           1       best_row = results_df.loc[results_df['VALIDATION ACCURACY'].idxmax()]
   348    280.3 MiB      0.0 MiB           1       best_params = best_row.to_dict()
   349    280.3 MiB      0.0 MiB           1       print("Best hyperparameters:", best_params)
   350                                         
   351                                             # Retrain and test using the best hyperparameters
   352    280.3 MiB      0.0 MiB           1       INCLUDE_PREV_CONTEXT = best_params["INCLUDE_PREV_CONTEXT"]
   353    280.3 MiB      0.0 MiB           1       GAMMA = best_params["GAMMA"]
   354    280.3 MiB      0.0 MiB           1       NB_TRAIN_ITERATIONS = int(best_params["NB_TRAIN_ITERATIONS"])
   355    280.3 MiB      0.0 MiB           1       HANDLE_N_SETTING = best_params["HANDLE_N_SETTING"]
   356    280.3 MiB      0.0 MiB           1       RATIO_PRETRAIN_TRAIN = best_params["RATIO_PRETRAIN_TRAIN"]
   357    280.3 MiB      0.0 MiB           1       ENSEMBLE_TYPE = best_params["ENSEMBLE_TYPE"]
   358    280.3 MiB      0.0 MiB           1       NUM_THREADS = best_params["NUM_THREADS"]
   359                                         
   360                                             # Retrain our best SPAs and use that to test on test data 
   361    280.3 MiB    -25.0 MiB           5       spa = [LZ78SPA(alphabet_size=ALPHABET_SIZE, gamma= GAMMA, compute_training_loss=False) for _ in unique_labels]
   362    255.3 MiB    -25.0 MiB           3       for i in range(len(unique_labels)):
   363    255.3 MiB      0.0 MiB           4           spa[i].set_inference_config(
   364    255.3 MiB      0.0 MiB           2               lb=1e-5,
   365    255.3 MiB      0.0 MiB           2               ensemble_type= ENSEMBLE_TYPE,
   366    255.3 MiB      0.0 MiB           2               ensemble_n=10,
   367    255.3 MiB      0.0 MiB           2               backshift_parsing=True,
   368    255.3 MiB      0.0 MiB           2               backshift_ctx_len=20,
   369    255.3 MiB      0.0 MiB           2               backshift_break_at_phrase=True
   370                                                 )
   371                                         
   372    255.4 MiB      0.1 MiB           1       train_data = handle_N(train_data, setting=HANDLE_N_SETTING)
   373    255.4 MiB      0.0 MiB           1       nb_train_seqs = len(train_data)
   374    255.4 MiB      0.0 MiB           1       seq_len = len(train_data.iloc[0, 0])
   375    255.4 MiB      0.0 MiB           1       nb_train_symbols = nb_train_seqs * seq_len
   376    255.4 MiB      0.0 MiB           1       nb_pretrain_symbols = math.ceil(RATIO_PRETRAIN_TRAIN * nb_train_symbols)
   377                                         
   378    255.4 MiB      0.0 MiB           1       pretrain_spa(pretrain_data, spa, nb_pretrain_symbols) 
   379    267.9 MiB     12.5 MiB           1       train_spa(train_data, spa, iterations=NB_TRAIN_ITERATIONS)
   380                                         
   381    267.9 MiB      0.0 MiB           1       train_end_time = time.perf_counter()
   382    267.9 MiB      0.0 MiB           1       train_duration = train_end_time - train_start_time
   383                                         
   384                                             
   385                                             
   386                                             # Final test
   387    267.9 MiB      0.0 MiB           1       print("-----TESTING")
   388    267.9 MiB      0.0 MiB           1       read_test_data_start_time = time.perf_counter()
   389    268.1 MiB      0.1 MiB           1       test_data = pd.read_csv(test_path)
   390                                         
   391    268.1 MiB      0.0 MiB           1       inference_start_time = time.perf_counter()
   392                                         
   393    268.1 MiB      0.0 MiB           1       test_data = handle_N(test_data)
   394    268.1 MiB      0.0 MiB           1       test_accuracy = test_seq(test_data, spa, NUM_THREADS)
   395                                         
   396    268.1 MiB      0.0 MiB           1       inference_end_time = time.perf_counter()
   397    268.1 MiB      0.0 MiB           1       print(f"Final accuracy with best hyperparameters: {(test_accuracy*100):.2f}")
   398                                             
   399                                                 
   400    268.1 MiB      0.0 MiB           1       inference_duration = inference_end_time - inference_start_time
   401                                         
   402    268.1 MiB      0.0 MiB           1       label = 0
   403    277.4 MiB      0.0 MiB           3       for sp in spa:
   404    277.4 MiB      9.1 MiB           2           spa_bytes = bytearray(sp.to_bytes())
   405    277.4 MiB      0.0 MiB           2           print(f"Mem in MB: {len(spa_bytes) / (1024 * 1024):.2f}", flush=True)
   406    277.4 MiB      0.2 MiB           2           makedirs("best_spas", exist_ok=True)
   407                                                 # Extract the part after 'GUE/' and replace slashes with underscores
   408    277.4 MiB      0.0 MiB           2           binary_file_name = dataset_folder.split("GUE/", 1)[-1].replace("/", "_")
   409                                                 
   410                                                 # Create the full path for the binary file
   411    277.4 MiB      0.0 MiB           2           binary_file_path = os.path.join("best_spas/minimal", f"{binary_file_name}_{label}.bin")
   412    277.4 MiB      0.0 MiB           2           label += 1
   413                                                 # Save the binary file
   414    277.4 MiB      0.0 MiB           4           with open(binary_file_path, 'wb') as file:
   415    277.4 MiB      0.0 MiB           2               file.write(spa_bytes)
   416                                             
   417                                         
   418    277.4 MiB      0.0 MiB           1       print("-----TIME PROFILING+")
   419    277.4 MiB      0.0 MiB           1       print(f"Read train + val data time: {(train_start_time - read_data_in_time): .5f}")
   420    277.4 MiB      0.0 MiB           1       print(f"Number of training symbols: {nb_train_symbols}")
   421    277.4 MiB      0.0 MiB           1       print(f"Length of one training sequence: {len(train_data.iloc[0, 0])}")
   422    277.4 MiB      0.0 MiB           1       print(f"Total training time: {train_duration:.3f} seconds")
   423                                             
   424                                         
   425    277.4 MiB      0.0 MiB           1       print(f"Number of test sequences: {len(test_data)}")
   426    277.4 MiB      0.0 MiB           1       print(f"Length of test sequence: {len(test_data.iloc[0, 0])}")
   427    277.4 MiB      0.0 MiB           1       print(f"Read test data time: {(inference_start_time - read_test_data_start_time): .5f}")
   428    277.4 MiB      0.0 MiB           1       print(f"Total inference time: {inference_duration:.3f} seconds")
   429    277.4 MiB      0.0 MiB           1       print(f"Inference time/symbol: {inference_duration/(len(test_data) * len(test_data.iloc[0, 0]))} seconds")
   430                                         
   431    277.4 MiB      0.0 MiB           1       print("-----MEMORY REPORT")


