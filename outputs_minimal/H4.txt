-----TRAINING
---SEARCH FOR BEST SPA(s)
nb_iterations , gamma, include_prev_context, handle_N_setting, ratio, ensemble type, num_threads, time taken, accuracy
1, 0.1, False, remove, 0.0, entropy, 64, 1.288, 79.60
1, 0.5, False, remove, 0.0, entropy, 64, 1.759, 83.50
1, 0.33, False, remove, 0.0, entropy, 64, 2.255, 81.72
1, 0.75, False, remove, 0.0, entropy, 64, 2.751, 84.67
1, 1.0, False, remove, 0.0, entropy, 64, 3.210, 85.28
1, 3.0, False, remove, 0.0, entropy, 64, 3.667, 86.17
1, 5.0, False, remove, 0.0, entropy, 64, 4.159, 86.72
3, 0.1, False, remove, 0.0, entropy, 64, 2.457, 82.61
3, 0.5, False, remove, 0.0, entropy, 64, 2.965, 85.08
3, 0.33, False, remove, 0.0, entropy, 64, 3.470, 84.74
3, 0.75, False, remove, 0.0, entropy, 64, 3.972, 85.76
3, 1.0, False, remove, 0.0, entropy, 64, 4.527, 86.31
3, 3.0, False, remove, 0.0, entropy, 64, 5.044, 87.61
3, 5.0, False, remove, 0.0, entropy, 64, 5.562, 88.57
5, 0.1, False, remove, 0.0, entropy, 64, 2.646, 83.23
5, 0.5, False, remove, 0.0, entropy, 64, 3.210, 85.49
5, 0.33, False, remove, 0.0, entropy, 64, 3.762, 84.33
5, 0.75, False, remove, 0.0, entropy, 64, 4.279, 86.17
5, 1.0, False, remove, 0.0, entropy, 64, 4.796, 86.17
5, 3.0, False, remove, 0.0, entropy, 64, 5.319, 88.57
5, 5.0, False, remove, 0.0, entropy, 64, 5.855, 89.05
7, 0.1, False, remove, 0.0, entropy, 64, 2.785, 83.23
7, 0.5, False, remove, 0.0, entropy, 64, 3.353, 84.60
7, 0.33, False, remove, 0.0, entropy, 64, 3.967, 84.46
7, 0.75, False, remove, 0.0, entropy, 64, 4.517, 84.74
7, 1.0, False, remove, 0.0, entropy, 64, 5.088, 85.28
7, 3.0, False, remove, 0.0, entropy, 64, 5.676, 87.13
7, 5.0, False, remove, 0.0, entropy, 64, 6.264, 88.57
10, 0.1, False, remove, 0.0, entropy, 64, 4.119, 83.16
10, 0.5, False, remove, 0.0, entropy, 64, 4.684, 84.53
10, 0.33, False, remove, 0.0, entropy, 64, 5.248, 84.26
10, 0.75, False, remove, 0.0, entropy, 64, 5.870, 85.01
10, 1.0, False, remove, 0.0, entropy, 64, 6.432, 85.28
10, 3.0, False, remove, 0.0, entropy, 64, 6.995, 86.52
10, 5.0, False, remove, 0.0, entropy, 64, 7.558, 87.89
---BEST SPA(s) FOUND
Best hyperparameters: {'INCLUDE_PREV_CONTEXT': False, 'GAMMA': 5.0, 'NB_TRAIN_ITERATIONS': 5, 'HANDLE_N_SETTING': 'remove', 'RATIO_PRETRAIN_TRAIN': 0.0, 'ENSEMBLE_TYPE': 'entropy', 'NUM_THREADS': 64, 'TRAINING_TIME': 5.854751355014741, 'VALIDATION ACCURACY': 0.890485968514716}
-----TESTING
Final accuracy with best hyperparameters: 88.77
Mem in MB: 40.57
Mem in MB: 33.47
-----TIME PROFILING+
Read train + val data time:  0.21231
Number of training symbols: 5839500
Length of one training sequence: 500
Total training time: 50.884 seconds
Number of test sequences: 1461
Length of test sequence: 500
Read test data time:  0.01514
Total inference time: 1.566 seconds
Inference time/symbol: 2.143442419132576e-06 seconds
-----MEMORY REPORT
Filename: /data/home/nsagan/LZ-Genomics/Train.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   229    137.5 MiB    137.5 MiB           1   @profile
   230                                         def main(dataset_folder, pretrain_file):
   231                                             global INCLUDE_PREV_CONTEXT
   232                                             global GAMMA
   233                                             global NB_TRAIN_ITERATIONS 
   234                                             global HANDLE_N_SETTING 
   235                                             global RATIO_PRETRAIN_TRAIN 
   236                                             global ENSEMBLE_TYPE 
   237                                             global NUM_THREADS
   238                                             
   239                                             global include_prev_contexts
   240                                             global gammas 
   241                                             global nb_train_iterations 
   242                                             global handle_N_settings 
   243                                             global ratio_pretrain_train
   244                                             global ensemble_type
   245                                             global num_threads
   246                                         
   247    137.5 MiB      0.0 MiB           1       read_data_in_time = time.perf_counter()
   248                                             
   249                                             # Read train, val, test data 
   250    137.5 MiB      0.0 MiB           1       train_path = f"{dataset_folder}/train.csv"
   251    137.5 MiB      0.0 MiB           1       val_path = f"{dataset_folder}/dev.csv"
   252    137.5 MiB      0.0 MiB           1       test_path = f"{dataset_folder}/test.csv"
   253                                             
   254                                         
   255    145.1 MiB      7.6 MiB           1       train_data = pd.read_csv(train_path)
   256    145.8 MiB      0.6 MiB           1       validation_data = pd.read_csv(val_path)
   257                                             
   258    145.8 MiB      0.0 MiB           1       ALPHABET_SIZE = 4
   259    145.8 MiB      0.0 MiB           1       unique_labels = train_data['label'].unique()
   260                                             
   261    241.8 MiB      0.0 MiB           2       with open(pretrain_file, 'r') as file:
   262    241.8 MiB     96.0 MiB           1           pretrain_data = file.read()
   263                                             
   264                                             # Train all SPAs using all possible combinations of hyperparams
   265                                             # Test all on validation set, return best SPA
   266    241.8 MiB      0.0 MiB           1       results_df = pd.DataFrame(columns=[
   267                                             "INCLUDE_PREV_CONTEXT", "GAMMA", "NB_TRAIN_ITERATIONS", 
   268                                             "HANDLE_N_SETTING", "RATIO_PRETRAIN_TRAIN", "ENSEMBLE_TYPE", "NUM_THREADS", "VALIDATION ACCURACY"
   269                                             ])
   270                                         
   271    241.8 MiB      0.0 MiB           1       print("-----TRAINING")
   272    241.8 MiB      0.0 MiB           1       print("---SEARCH FOR BEST SPA(s)")
   273    241.8 MiB      0.0 MiB           1       print("nb_iterations , gamma, include_prev_context, handle_N_setting, ratio, ensemble type, num_threads, time taken, accuracy", flush=True)
   274    241.8 MiB      0.0 MiB           1       train_start_time = time.perf_counter()
   275    534.0 MiB      0.0 MiB           3       for include_prev_context, handle_N_setting, ratio in itertools.product(
   276    241.8 MiB      0.0 MiB           1           include_prev_contexts, handle_N_settings, ratio_pretrain_train
   277                                             ):  
   278    241.8 MiB      0.0 MiB           1           INCLUDE_PREV_CONTEXT = include_prev_context
   279    241.8 MiB      0.0 MiB           1           GAMMA = gammas
   280    241.8 MiB      0.0 MiB           1           NB_TRAIN_ITERATIONS = 0
   281    241.8 MiB      0.0 MiB           1           HANDLE_N_SETTING = handle_N_setting
   282    241.8 MiB      0.0 MiB           1           RATIO_PRETRAIN_TRAIN = ratio 
   283    241.8 MiB      0.0 MiB           1           ENSEMBLE_TYPE = ensemble_type
   284    241.8 MiB      0.0 MiB           1           NUM_THREADS = num_threads
   285                                                 
   286    251.2 MiB      9.4 MiB           1           train_data = handle_N(train_data, setting=HANDLE_N_SETTING)
   287    251.2 MiB      0.0 MiB           1           validation_data = handle_N(validation_data)
   288    251.2 MiB      0.0 MiB           1           nb_train_seqs = len(train_data)
   289    251.2 MiB      0.0 MiB           1           seq_len = len(train_data.iloc[0, 0])
   290    251.2 MiB      0.0 MiB           1           nb_train_symbols = nb_train_seqs * seq_len
   291                                                 
   292                                                 # Create list of spas based on number of labels: (spa_0 and spa_1 for labels 0, 1)
   293    251.2 MiB      0.0 MiB           5           spa = [LZ78SPA(alphabet_size=ALPHABET_SIZE, compute_training_loss=False) for _ in unique_labels]
   294    251.2 MiB      0.0 MiB           3           for i in range(len(unique_labels)):
   295    251.2 MiB      0.0 MiB           4               spa[i].set_inference_config(
   296    251.2 MiB      0.0 MiB           2                   lb=1e-5,
   297    251.2 MiB      0.0 MiB           2                   ensemble_type="entropy",
   298    251.2 MiB      0.0 MiB           2                   ensemble_n=10,
   299    251.2 MiB      0.0 MiB           2                   backshift_parsing=True,
   300    251.2 MiB      0.0 MiB           2                   backshift_ctx_len=20,
   301    251.2 MiB      0.0 MiB           2                   backshift_break_at_phrase=True
   302                                                     )
   303                                         
   304    251.2 MiB      0.0 MiB           1           nb_pretrain_symbols = math.ceil(RATIO_PRETRAIN_TRAIN * nb_train_symbols)
   305    251.2 MiB      0.0 MiB           1           pretrain_spa(pretrain_data, spa, nb_pretrain_symbols) 
   306                                         
   307    251.2 MiB      0.0 MiB           1           iterated_times = 0
   308    534.0 MiB     -0.4 MiB           6           for nb_iterations in nb_train_iterations:
   309    459.0 MiB      0.0 MiB           5               train_one_iter_start_time = time.perf_counter()
   310    534.0 MiB      0.0 MiB          15               for _ in range(nb_iterations - iterated_times):
   311    534.0 MiB    277.1 MiB          10                   train_spa_oneIter(train_data, spa)
   312                                                     
   313    534.0 MiB      0.0 MiB           5               iterated_times = nb_iterations
   314    534.0 MiB     -1.8 MiB          40               for gamma in gammas:
   315    534.0 MiB     -4.0 MiB          70                   for ensemble in ENSEMBLE_TYPE:
   316                                                         # Test on validation test to assess this combination of hyperparams
   317    534.0 MiB     -4.4 MiB         105                       for index in range(len(spa)):
   318    534.0 MiB     -2.9 MiB          70                           spa[index].set_inference_config(gamma=gamma, ensemble_type=ensemble)
   319    534.0 MiB      2.3 MiB          35                       accuracy = test_seq(validation_data, spa, num_threads)
   320    534.0 MiB     -2.4 MiB          35                       train_one_iter_end_time = time.perf_counter()
   321    534.0 MiB     -2.4 MiB          35                       train_one_iter_duration = train_one_iter_end_time - train_one_iter_start_time
   322    534.0 MiB     -2.4 MiB          35                       print(f"{nb_iterations}, {gamma}, {include_prev_context}, {handle_N_setting}, {ratio}, {ensemble}, {NUM_THREADS}, {train_one_iter_duration:.3f}, {(accuracy * 100):.2f}", flush=True)
   323                                         
   324                                                         
   325                                                         
   326    534.0 MiB     -4.2 MiB          70                       current_result = pd.DataFrame([{
   327    534.0 MiB     -2.7 MiB          35                           "INCLUDE_PREV_CONTEXT": INCLUDE_PREV_CONTEXT,
   328    534.0 MiB     -2.4 MiB          35                           "GAMMA": gamma,
   329    534.0 MiB     -2.4 MiB          35                           "NB_TRAIN_ITERATIONS": nb_iterations,
   330    534.0 MiB     -2.4 MiB          35                           "HANDLE_N_SETTING": HANDLE_N_SETTING,
   331    534.0 MiB     -2.4 MiB          35                           "RATIO_PRETRAIN_TRAIN": RATIO_PRETRAIN_TRAIN,
   332    534.0 MiB     -2.4 MiB          35                           "ENSEMBLE_TYPE": ensemble,
   333    534.0 MiB     -2.4 MiB          35                           "NUM_THREADS": NUM_THREADS,
   334    534.0 MiB     -2.4 MiB          35                           "TRAINING_TIME": train_one_iter_duration, 
   335    534.0 MiB     -2.4 MiB          35                           "VALIDATION ACCURACY": accuracy
   336                                                             }])
   337                                         
   338                                                         # Concatenate the current result with results_df
   339    534.0 MiB     -1.8 MiB          35                   results_df = results_df.dropna(axis=1, how='all')
   340    534.0 MiB     -1.7 MiB          35                   current_result = current_result.dropna(axis=1, how='all')
   341                                         
   342    534.0 MiB     -1.7 MiB          35                   results_df = pd.concat([results_df, current_result], ignore_index=True)
   343                                         
   344                                             
   345                                             # Find the best hyperparameter combination based on the highest accuracy
   346    534.0 MiB      0.0 MiB           1       print("---BEST SPA(s) FOUND")
   347    534.0 MiB      0.0 MiB           1       best_row = results_df.loc[results_df['VALIDATION ACCURACY'].idxmax()]
   348    534.0 MiB      0.0 MiB           1       best_params = best_row.to_dict()
   349    534.0 MiB      0.0 MiB           1       print("Best hyperparameters:", best_params)
   350                                         
   351                                             # Retrain and test using the best hyperparameters
   352    534.0 MiB      0.0 MiB           1       INCLUDE_PREV_CONTEXT = best_params["INCLUDE_PREV_CONTEXT"]
   353    534.0 MiB      0.0 MiB           1       GAMMA = best_params["GAMMA"]
   354    534.0 MiB      0.0 MiB           1       NB_TRAIN_ITERATIONS = int(best_params["NB_TRAIN_ITERATIONS"])
   355    534.0 MiB      0.0 MiB           1       HANDLE_N_SETTING = best_params["HANDLE_N_SETTING"]
   356    534.0 MiB      0.0 MiB           1       RATIO_PRETRAIN_TRAIN = best_params["RATIO_PRETRAIN_TRAIN"]
   357    534.0 MiB      0.0 MiB           1       ENSEMBLE_TYPE = best_params["ENSEMBLE_TYPE"]
   358    534.0 MiB      0.0 MiB           1       NUM_THREADS = best_params["NUM_THREADS"]
   359                                         
   360                                             # Retrain our best SPAs and use that to test on test data 
   361    534.0 MiB   -221.8 MiB           5       spa = [LZ78SPA(alphabet_size=ALPHABET_SIZE, gamma= GAMMA, compute_training_loss=False) for _ in unique_labels]
   362    312.2 MiB   -221.8 MiB           3       for i in range(len(unique_labels)):
   363    312.2 MiB      0.0 MiB           4           spa[i].set_inference_config(
   364    312.2 MiB      0.0 MiB           2               lb=1e-5,
   365    312.2 MiB      0.0 MiB           2               ensemble_type= ENSEMBLE_TYPE,
   366    312.2 MiB      0.0 MiB           2               ensemble_n=10,
   367    312.2 MiB      0.0 MiB           2               backshift_parsing=True,
   368    312.2 MiB      0.0 MiB           2               backshift_ctx_len=20,
   369    312.2 MiB      0.0 MiB           2               backshift_break_at_phrase=True
   370                                                 )
   371                                         
   372    312.2 MiB      0.0 MiB           1       train_data = handle_N(train_data, setting=HANDLE_N_SETTING)
   373    312.2 MiB      0.0 MiB           1       nb_train_seqs = len(train_data)
   374    312.2 MiB      0.0 MiB           1       seq_len = len(train_data.iloc[0, 0])
   375    312.2 MiB      0.0 MiB           1       nb_train_symbols = nb_train_seqs * seq_len
   376    312.2 MiB      0.0 MiB           1       nb_pretrain_symbols = math.ceil(RATIO_PRETRAIN_TRAIN * nb_train_symbols)
   377                                         
   378    312.2 MiB      0.0 MiB           1       pretrain_spa(pretrain_data, spa, nb_pretrain_symbols) 
   379    393.8 MiB     81.6 MiB           1       train_spa(train_data, spa, iterations=NB_TRAIN_ITERATIONS)
   380                                         
   381    393.8 MiB      0.0 MiB           1       train_end_time = time.perf_counter()
   382    393.8 MiB      0.0 MiB           1       train_duration = train_end_time - train_start_time
   383                                         
   384                                             
   385                                             
   386                                             # Final test
   387    393.8 MiB      0.0 MiB           1       print("-----TESTING")
   388    393.8 MiB      0.0 MiB           1       read_test_data_start_time = time.perf_counter()
   389    395.3 MiB      1.5 MiB           1       test_data = pd.read_csv(test_path)
   390                                         
   391    395.3 MiB      0.0 MiB           1       inference_start_time = time.perf_counter()
   392                                         
   393    395.3 MiB      0.0 MiB           1       test_data = handle_N(test_data)
   394    395.3 MiB     -0.0 MiB           1       test_accuracy = test_seq(test_data, spa, NUM_THREADS)
   395                                         
   396    395.3 MiB      0.0 MiB           1       inference_end_time = time.perf_counter()
   397    395.3 MiB      0.0 MiB           1       print(f"Final accuracy with best hyperparameters: {(test_accuracy*100):.2f}")
   398                                             
   399                                                 
   400    395.3 MiB      0.0 MiB           1       inference_duration = inference_end_time - inference_start_time
   401                                         
   402    395.3 MiB      0.0 MiB           1       label = 0
   403    461.9 MiB     -7.1 MiB           3       for sp in spa:
   404    461.9 MiB     59.5 MiB           2           spa_bytes = bytearray(sp.to_bytes())
   405    461.9 MiB     -7.1 MiB           2           print(f"Mem in MB: {len(spa_bytes) / (1024 * 1024):.2f}", flush=True)
   406    461.9 MiB     -7.1 MiB           2           makedirs("best_spas", exist_ok=True)
   407                                                 # Extract the part after 'GUE/' and replace slashes with underscores
   408    461.9 MiB     -7.1 MiB           2           binary_file_name = dataset_folder.split("GUE/", 1)[-1].replace("/", "_")
   409                                                 
   410                                                 # Create the full path for the binary file
   411    461.9 MiB     -7.1 MiB           2           binary_file_path = os.path.join("best_spas/minimal", f"{binary_file_name}_{label}.bin")
   412    461.9 MiB     -7.1 MiB           2           label += 1
   413                                                 # Save the binary file
   414    461.9 MiB    -14.2 MiB           4           with open(binary_file_path, 'wb') as file:
   415    461.9 MiB     -7.1 MiB           2               file.write(spa_bytes)
   416                                             
   417                                         
   418    454.8 MiB     -7.1 MiB           1       print("-----TIME PROFILING+")
   419    454.8 MiB      0.0 MiB           1       print(f"Read train + val data time: {(train_start_time - read_data_in_time): .5f}")
   420    454.8 MiB      0.0 MiB           1       print(f"Number of training symbols: {nb_train_symbols}")
   421    454.8 MiB      0.0 MiB           1       print(f"Length of one training sequence: {len(train_data.iloc[0, 0])}")
   422    454.8 MiB      0.0 MiB           1       print(f"Total training time: {train_duration:.3f} seconds")
   423                                             
   424                                         
   425    454.8 MiB      0.0 MiB           1       print(f"Number of test sequences: {len(test_data)}")
   426    454.8 MiB      0.0 MiB           1       print(f"Length of test sequence: {len(test_data.iloc[0, 0])}")
   427    454.8 MiB      0.0 MiB           1       print(f"Read test data time: {(inference_start_time - read_test_data_start_time): .5f}")
   428    454.8 MiB      0.0 MiB           1       print(f"Total inference time: {inference_duration:.3f} seconds")
   429    454.8 MiB      0.0 MiB           1       print(f"Inference time/symbol: {inference_duration/(len(test_data) * len(test_data.iloc[0, 0]))} seconds")
   430                                         
   431    454.8 MiB      0.0 MiB           1       print("-----MEMORY REPORT")


