-----TRAINING
---SEARCH FOR BEST SPA(s)
nb_iterations , gamma, include_prev_context, handle_N_setting, ratio, ensemble type, num_threads, time taken, accuracy
1, 0.1, False, remove, 0.0, entropy, 64, 1.084, 68.12
1, 0.5, False, remove, 0.0, entropy, 64, 1.364, 70.85
1, 0.33, False, remove, 0.0, entropy, 64, 1.655, 69.81
1, 0.75, False, remove, 0.0, entropy, 64, 1.982, 71.91
1, 1.0, False, remove, 0.0, entropy, 64, 2.293, 72.41
1, 3.0, False, remove, 0.0, entropy, 64, 2.635, 73.92
1, 5.0, False, remove, 0.0, entropy, 64, 2.961, 73.73
3, 0.1, False, remove, 0.0, entropy, 64, 1.940, 64.52
3, 0.5, False, remove, 0.0, entropy, 64, 2.252, 67.80
3, 0.33, False, remove, 0.0, entropy, 64, 2.586, 66.84
3, 0.75, False, remove, 0.0, entropy, 64, 2.878, 69.23
3, 1.0, False, remove, 0.0, entropy, 64, 3.215, 70.13
3, 3.0, False, remove, 0.0, entropy, 64, 3.520, 72.87
3, 5.0, False, remove, 0.0, entropy, 64, 3.824, 73.36
5, 0.1, False, remove, 0.0, entropy, 64, 2.369, 59.66
5, 0.5, False, remove, 0.0, entropy, 64, 2.655, 64.03
5, 0.33, False, remove, 0.0, entropy, 64, 2.977, 62.75
5, 0.75, False, remove, 0.0, entropy, 64, 3.258, 65.39
5, 1.0, False, remove, 0.0, entropy, 64, 3.597, 66.67
5, 3.0, False, remove, 0.0, entropy, 64, 3.894, 71.11
5, 5.0, False, remove, 0.0, entropy, 64, 4.219, 72.21
7, 0.1, False, remove, 0.0, entropy, 64, 2.092, 56.38
7, 0.5, False, remove, 0.0, entropy, 64, 2.472, 61.03
7, 0.33, False, remove, 0.0, entropy, 64, 2.765, 59.22
7, 0.75, False, remove, 0.0, entropy, 64, 3.085, 62.84
7, 1.0, False, remove, 0.0, entropy, 64, 3.406, 64.48
7, 3.0, False, remove, 0.0, entropy, 64, 3.711, 69.12
7, 5.0, False, remove, 0.0, entropy, 64, 4.040, 70.83
10, 0.1, False, remove, 0.0, entropy, 64, 3.028, 53.01
10, 0.5, False, remove, 0.0, entropy, 64, 3.374, 57.60
10, 0.33, False, remove, 0.0, entropy, 64, 3.672, 55.79
10, 0.75, False, remove, 0.0, entropy, 64, 4.000, 59.69
10, 1.0, False, remove, 0.0, entropy, 64, 4.312, 61.07
10, 3.0, False, remove, 0.0, entropy, 64, 4.613, 66.89
10, 5.0, False, remove, 0.0, entropy, 64, 4.943, 68.97
---BEST SPA(s) FOUND
Best hyperparameters: {'INCLUDE_PREV_CONTEXT': False, 'GAMMA': 3.0, 'NB_TRAIN_ITERATIONS': 1, 'HANDLE_N_SETTING': 'remove', 'RATIO_PRETRAIN_TRAIN': 0.0, 'ENSEMBLE_TYPE': 'entropy', 'NUM_THREADS': 64, 'TRAINING_TIME': 2.6350642796605825, 'VALIDATION ACCURACY': 0.7392123610325985}
-----TESTING
Final accuracy with best hyperparameters: 73.96
Mem in MB: 4.40
Mem in MB: 4.20
-----TIME PROFILING+
Read train + val data time:  0.20149
Number of training symbols: 2971640
Length of one training sequence: 70
Total training time: 47.921 seconds
Number of test sequences: 5307
Length of test sequence: 70
Read test data time:  0.01029
Total inference time: 1.917 seconds
Inference time/symbol: 5.159899953406491e-06 seconds
-----MEMORY REPORT
Filename: /data/home/nsagan/LZ-Genomics/Train.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   229    138.0 MiB    138.0 MiB           1   @profile
   230                                         def main(dataset_folder, pretrain_file):
   231                                             global INCLUDE_PREV_CONTEXT
   232                                             global GAMMA
   233                                             global NB_TRAIN_ITERATIONS 
   234                                             global HANDLE_N_SETTING 
   235                                             global RATIO_PRETRAIN_TRAIN 
   236                                             global ENSEMBLE_TYPE 
   237                                             global NUM_THREADS
   238                                             
   239                                             global include_prev_contexts
   240                                             global gammas 
   241                                             global nb_train_iterations 
   242                                             global handle_N_settings 
   243                                             global ratio_pretrain_train
   244                                             global ensemble_type
   245                                             global num_threads
   246                                         
   247    138.0 MiB      0.0 MiB           1       read_data_in_time = time.perf_counter()
   248                                             
   249                                             # Read train, val, test data 
   250    138.0 MiB      0.0 MiB           1       train_path = f"{dataset_folder}/train.csv"
   251    138.0 MiB      0.0 MiB           1       val_path = f"{dataset_folder}/dev.csv"
   252    138.0 MiB      0.0 MiB           1       test_path = f"{dataset_folder}/test.csv"
   253                                             
   254                                         
   255    145.9 MiB      7.9 MiB           1       train_data = pd.read_csv(train_path)
   256    146.6 MiB      0.7 MiB           1       validation_data = pd.read_csv(val_path)
   257                                             
   258    146.6 MiB      0.0 MiB           1       ALPHABET_SIZE = 4
   259    146.6 MiB      0.0 MiB           1       unique_labels = train_data['label'].unique()
   260                                             
   261    242.6 MiB      0.0 MiB           2       with open(pretrain_file, 'r') as file:
   262    242.6 MiB     96.0 MiB           1           pretrain_data = file.read()
   263                                             
   264                                             # Train all SPAs using all possible combinations of hyperparams
   265                                             # Test all on validation set, return best SPA
   266    242.6 MiB      0.0 MiB           1       results_df = pd.DataFrame(columns=[
   267                                             "INCLUDE_PREV_CONTEXT", "GAMMA", "NB_TRAIN_ITERATIONS", 
   268                                             "HANDLE_N_SETTING", "RATIO_PRETRAIN_TRAIN", "ENSEMBLE_TYPE", "NUM_THREADS", "VALIDATION ACCURACY"
   269                                             ])
   270                                         
   271    242.6 MiB      0.0 MiB           1       print("-----TRAINING")
   272    242.6 MiB      0.0 MiB           1       print("---SEARCH FOR BEST SPA(s)")
   273    242.6 MiB      0.0 MiB           1       print("nb_iterations , gamma, include_prev_context, handle_N_setting, ratio, ensemble type, num_threads, time taken, accuracy", flush=True)
   274    242.6 MiB      0.0 MiB           1       train_start_time = time.perf_counter()
   275    399.9 MiB      0.0 MiB           3       for include_prev_context, handle_N_setting, ratio in itertools.product(
   276    242.6 MiB      0.0 MiB           1           include_prev_contexts, handle_N_settings, ratio_pretrain_train
   277                                             ):  
   278    242.6 MiB      0.0 MiB           1           INCLUDE_PREV_CONTEXT = include_prev_context
   279    242.6 MiB      0.0 MiB           1           GAMMA = gammas
   280    242.6 MiB      0.0 MiB           1           NB_TRAIN_ITERATIONS = 0
   281    242.6 MiB      0.0 MiB           1           HANDLE_N_SETTING = handle_N_setting
   282    242.6 MiB      0.0 MiB           1           RATIO_PRETRAIN_TRAIN = ratio 
   283    242.6 MiB      0.0 MiB           1           ENSEMBLE_TYPE = ensemble_type
   284    242.6 MiB      0.0 MiB           1           NUM_THREADS = num_threads
   285                                                 
   286    255.1 MiB     12.6 MiB           1           train_data = handle_N(train_data, setting=HANDLE_N_SETTING)
   287    255.1 MiB      0.0 MiB           1           validation_data = handle_N(validation_data)
   288    255.1 MiB      0.0 MiB           1           nb_train_seqs = len(train_data)
   289    255.2 MiB      0.0 MiB           1           seq_len = len(train_data.iloc[0, 0])
   290    255.2 MiB      0.0 MiB           1           nb_train_symbols = nb_train_seqs * seq_len
   291                                                 
   292                                                 # Create list of spas based on number of labels: (spa_0 and spa_1 for labels 0, 1)
   293    255.2 MiB      0.0 MiB           5           spa = [LZ78SPA(alphabet_size=ALPHABET_SIZE, compute_training_loss=False) for _ in unique_labels]
   294    255.2 MiB      0.0 MiB           3           for i in range(len(unique_labels)):
   295    255.2 MiB      0.0 MiB           4               spa[i].set_inference_config(
   296    255.2 MiB      0.0 MiB           2                   lb=1e-5,
   297    255.2 MiB      0.0 MiB           2                   ensemble_type="entropy",
   298    255.2 MiB      0.0 MiB           2                   ensemble_n=10,
   299    255.2 MiB      0.0 MiB           2                   backshift_parsing=True,
   300    255.2 MiB      0.0 MiB           2                   backshift_ctx_len=20,
   301    255.2 MiB      0.0 MiB           2                   backshift_break_at_phrase=True
   302                                                     )
   303                                         
   304    255.2 MiB      0.0 MiB           1           nb_pretrain_symbols = math.ceil(RATIO_PRETRAIN_TRAIN * nb_train_symbols)
   305    255.2 MiB      0.0 MiB           1           pretrain_spa(pretrain_data, spa, nb_pretrain_symbols) 
   306                                         
   307    255.2 MiB      0.0 MiB           1           iterated_times = 0
   308    399.9 MiB     -0.1 MiB           6           for nb_iterations in nb_train_iterations:
   309    363.1 MiB      0.0 MiB           5               train_one_iter_start_time = time.perf_counter()
   310    399.9 MiB      0.0 MiB          15               for _ in range(nb_iterations - iterated_times):
   311    399.9 MiB    131.4 MiB          10                   train_spa_oneIter(train_data, spa)
   312                                                     
   313    399.9 MiB      0.0 MiB           5               iterated_times = nb_iterations
   314    400.0 MiB     -2.0 MiB          40               for gamma in gammas:
   315    400.0 MiB     -4.1 MiB          70                   for ensemble in ENSEMBLE_TYPE:
   316                                                         # Test on validation test to assess this combination of hyperparams
   317    400.0 MiB     -5.6 MiB         105                       for index in range(len(spa)):
   318    400.0 MiB     -3.8 MiB          70                           spa[index].set_inference_config(gamma=gamma, ensemble_type=ensemble)
   319    400.0 MiB     11.2 MiB          35                       accuracy = test_seq(validation_data, spa, num_threads)
   320    400.0 MiB     -2.2 MiB          35                       train_one_iter_end_time = time.perf_counter()
   321    400.0 MiB     -2.2 MiB          35                       train_one_iter_duration = train_one_iter_end_time - train_one_iter_start_time
   322    400.0 MiB     -2.2 MiB          35                       print(f"{nb_iterations}, {gamma}, {include_prev_context}, {handle_N_setting}, {ratio}, {ensemble}, {NUM_THREADS}, {train_one_iter_duration:.3f}, {(accuracy * 100):.2f}", flush=True)
   323                                         
   324                                                         
   325                                                         
   326    400.0 MiB     -4.3 MiB          70                       current_result = pd.DataFrame([{
   327    400.0 MiB     -2.2 MiB          35                           "INCLUDE_PREV_CONTEXT": INCLUDE_PREV_CONTEXT,
   328    400.0 MiB     -2.2 MiB          35                           "GAMMA": gamma,
   329    400.0 MiB     -2.2 MiB          35                           "NB_TRAIN_ITERATIONS": nb_iterations,
   330    400.0 MiB     -2.2 MiB          35                           "HANDLE_N_SETTING": HANDLE_N_SETTING,
   331    400.0 MiB     -2.2 MiB          35                           "RATIO_PRETRAIN_TRAIN": RATIO_PRETRAIN_TRAIN,
   332    400.0 MiB     -2.2 MiB          35                           "ENSEMBLE_TYPE": ensemble,
   333    400.0 MiB     -2.2 MiB          35                           "NUM_THREADS": NUM_THREADS,
   334    400.0 MiB     -2.2 MiB          35                           "TRAINING_TIME": train_one_iter_duration, 
   335    400.0 MiB     -2.2 MiB          35                           "VALIDATION ACCURACY": accuracy
   336                                                             }])
   337                                         
   338                                                         # Concatenate the current result with results_df
   339    400.0 MiB     -2.0 MiB          35                   results_df = results_df.dropna(axis=1, how='all')
   340    400.0 MiB     -1.9 MiB          35                   current_result = current_result.dropna(axis=1, how='all')
   341                                         
   342    400.0 MiB     -2.0 MiB          35                   results_df = pd.concat([results_df, current_result], ignore_index=True)
   343                                         
   344                                             
   345                                             # Find the best hyperparameter combination based on the highest accuracy
   346    399.9 MiB      0.0 MiB           1       print("---BEST SPA(s) FOUND")
   347    399.9 MiB      0.0 MiB           1       best_row = results_df.loc[results_df['VALIDATION ACCURACY'].idxmax()]
   348    399.9 MiB      0.0 MiB           1       best_params = best_row.to_dict()
   349    399.9 MiB      0.0 MiB           1       print("Best hyperparameters:", best_params)
   350                                         
   351                                             # Retrain and test using the best hyperparameters
   352    399.9 MiB      0.0 MiB           1       INCLUDE_PREV_CONTEXT = best_params["INCLUDE_PREV_CONTEXT"]
   353    399.9 MiB      0.0 MiB           1       GAMMA = best_params["GAMMA"]
   354    399.9 MiB      0.0 MiB           1       NB_TRAIN_ITERATIONS = int(best_params["NB_TRAIN_ITERATIONS"])
   355    399.9 MiB      0.0 MiB           1       HANDLE_N_SETTING = best_params["HANDLE_N_SETTING"]
   356    399.9 MiB      0.0 MiB           1       RATIO_PRETRAIN_TRAIN = best_params["RATIO_PRETRAIN_TRAIN"]
   357    399.9 MiB      0.0 MiB           1       ENSEMBLE_TYPE = best_params["ENSEMBLE_TYPE"]
   358    399.9 MiB      0.0 MiB           1       NUM_THREADS = best_params["NUM_THREADS"]
   359                                         
   360                                             # Retrain our best SPAs and use that to test on test data 
   361    399.9 MiB    -99.9 MiB           5       spa = [LZ78SPA(alphabet_size=ALPHABET_SIZE, gamma= GAMMA, compute_training_loss=False) for _ in unique_labels]
   362    300.0 MiB    -99.9 MiB           3       for i in range(len(unique_labels)):
   363    300.0 MiB      0.0 MiB           4           spa[i].set_inference_config(
   364    300.0 MiB      0.0 MiB           2               lb=1e-5,
   365    300.0 MiB      0.0 MiB           2               ensemble_type= ENSEMBLE_TYPE,
   366    300.0 MiB      0.0 MiB           2               ensemble_n=10,
   367    300.0 MiB      0.0 MiB           2               backshift_parsing=True,
   368    300.0 MiB      0.0 MiB           2               backshift_ctx_len=20,
   369    300.0 MiB      0.0 MiB           2               backshift_break_at_phrase=True
   370                                                 )
   371                                         
   372    303.1 MiB      3.1 MiB           1       train_data = handle_N(train_data, setting=HANDLE_N_SETTING)
   373    303.1 MiB      0.0 MiB           1       nb_train_seqs = len(train_data)
   374    303.1 MiB      0.0 MiB           1       seq_len = len(train_data.iloc[0, 0])
   375    303.1 MiB      0.0 MiB           1       nb_train_symbols = nb_train_seqs * seq_len
   376    303.1 MiB      0.0 MiB           1       nb_pretrain_symbols = math.ceil(RATIO_PRETRAIN_TRAIN * nb_train_symbols)
   377                                         
   378    303.1 MiB      0.0 MiB           1       pretrain_spa(pretrain_data, spa, nb_pretrain_symbols) 
   379    303.1 MiB      0.0 MiB           1       train_spa(train_data, spa, iterations=NB_TRAIN_ITERATIONS)
   380                                         
   381    303.1 MiB      0.0 MiB           1       train_end_time = time.perf_counter()
   382    303.1 MiB      0.0 MiB           1       train_duration = train_end_time - train_start_time
   383                                         
   384                                             
   385                                             
   386                                             # Final test
   387    303.1 MiB      0.0 MiB           1       print("-----TESTING")
   388    303.1 MiB      0.0 MiB           1       read_test_data_start_time = time.perf_counter()
   389    303.1 MiB      0.0 MiB           1       test_data = pd.read_csv(test_path)
   390                                         
   391    303.1 MiB      0.0 MiB           1       inference_start_time = time.perf_counter()
   392                                         
   393    303.1 MiB      0.0 MiB           1       test_data = handle_N(test_data)
   394    304.1 MiB      1.1 MiB           1       test_accuracy = test_seq(test_data, spa, NUM_THREADS)
   395                                         
   396    304.1 MiB      0.0 MiB           1       inference_end_time = time.perf_counter()
   397    304.1 MiB      0.0 MiB           1       print(f"Final accuracy with best hyperparameters: {(test_accuracy*100):.2f}")
   398                                             
   399                                                 
   400    304.1 MiB      0.0 MiB           1       inference_duration = inference_end_time - inference_start_time
   401                                         
   402    304.1 MiB      0.0 MiB           1       label = 0
   403    308.6 MiB      0.0 MiB           3       for sp in spa:
   404    308.6 MiB      4.5 MiB           2           spa_bytes = bytearray(sp.to_bytes())
   405    308.6 MiB      0.0 MiB           2           print(f"Mem in MB: {len(spa_bytes) / (1024 * 1024):.2f}", flush=True)
   406    308.6 MiB      0.0 MiB           2           makedirs("best_spas", exist_ok=True)
   407                                                 # Extract the part after 'GUE/' and replace slashes with underscores
   408    308.6 MiB      0.0 MiB           2           binary_file_name = dataset_folder.split("GUE/", 1)[-1].replace("/", "_")
   409                                                 
   410                                                 # Create the full path for the binary file
   411    308.6 MiB      0.0 MiB           2           binary_file_path = os.path.join("best_spas/minimal", f"{binary_file_name}_{label}.bin")
   412    308.6 MiB      0.0 MiB           2           label += 1
   413                                                 # Save the binary file
   414    308.6 MiB      0.0 MiB           4           with open(binary_file_path, 'wb') as file:
   415    308.6 MiB      0.0 MiB           2               file.write(spa_bytes)
   416                                             
   417                                         
   418    308.6 MiB      0.0 MiB           1       print("-----TIME PROFILING+")
   419    308.6 MiB      0.0 MiB           1       print(f"Read train + val data time: {(train_start_time - read_data_in_time): .5f}")
   420    308.6 MiB      0.0 MiB           1       print(f"Number of training symbols: {nb_train_symbols}")
   421    308.6 MiB      0.0 MiB           1       print(f"Length of one training sequence: {len(train_data.iloc[0, 0])}")
   422    308.6 MiB      0.0 MiB           1       print(f"Total training time: {train_duration:.3f} seconds")
   423                                             
   424                                         
   425    308.6 MiB      0.0 MiB           1       print(f"Number of test sequences: {len(test_data)}")
   426    308.6 MiB      0.0 MiB           1       print(f"Length of test sequence: {len(test_data.iloc[0, 0])}")
   427    308.6 MiB      0.0 MiB           1       print(f"Read test data time: {(inference_start_time - read_test_data_start_time): .5f}")
   428    308.6 MiB      0.0 MiB           1       print(f"Total inference time: {inference_duration:.3f} seconds")
   429    308.6 MiB      0.0 MiB           1       print(f"Inference time/symbol: {inference_duration/(len(test_data) * len(test_data.iloc[0, 0]))} seconds")
   430                                         
   431    308.6 MiB      0.0 MiB           1       print("-----MEMORY REPORT")


