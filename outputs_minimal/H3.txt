-----TRAINING
---SEARCH FOR BEST SPA(s)
nb_iterations , gamma, include_prev_context, handle_N_setting, ratio, ensemble type, num_threads, time taken, accuracy
1, 0.1, False, remove, 0.0, entropy, 64, 1.312, 81.70
1, 0.5, False, remove, 0.0, entropy, 64, 1.799, 82.77
1, 0.33, False, remove, 0.0, entropy, 64, 2.276, 82.50
1, 0.75, False, remove, 0.0, entropy, 64, 2.752, 83.23
1, 1.0, False, remove, 0.0, entropy, 64, 3.243, 82.10
1, 3.0, False, remove, 0.0, entropy, 64, 3.700, 80.76
1, 5.0, False, remove, 0.0, entropy, 64, 4.204, 79.09
3, 0.1, False, remove, 0.0, entropy, 64, 2.503, 84.17
3, 0.5, False, remove, 0.0, entropy, 64, 3.025, 85.70
3, 0.33, False, remove, 0.0, entropy, 64, 3.547, 85.37
3, 0.75, False, remove, 0.0, entropy, 64, 4.064, 85.30
3, 1.0, False, remove, 0.0, entropy, 64, 4.582, 85.37
3, 3.0, False, remove, 0.0, entropy, 64, 5.122, 85.57
3, 5.0, False, remove, 0.0, entropy, 64, 5.684, 84.50
5, 0.1, False, remove, 0.0, entropy, 64, 2.847, 85.10
5, 0.5, False, remove, 0.0, entropy, 64, 3.394, 85.57
5, 0.33, False, remove, 0.0, entropy, 64, 3.939, 85.30
5, 0.75, False, remove, 0.0, entropy, 64, 4.462, 86.04
5, 1.0, False, remove, 0.0, entropy, 64, 5.005, 86.24
5, 3.0, False, remove, 0.0, entropy, 64, 5.546, 87.24
5, 5.0, False, remove, 0.0, entropy, 64, 6.095, 86.04
7, 0.1, False, remove, 0.0, entropy, 64, 2.956, 84.90
7, 0.5, False, remove, 0.0, entropy, 64, 3.563, 85.77
7, 0.33, False, remove, 0.0, entropy, 64, 4.100, 85.70
7, 0.75, False, remove, 0.0, entropy, 64, 4.666, 86.24
7, 1.0, False, remove, 0.0, entropy, 64, 5.231, 86.17
7, 3.0, False, remove, 0.0, entropy, 64, 5.784, 86.77
7, 5.0, False, remove, 0.0, entropy, 64, 6.356, 87.17
10, 0.1, False, remove, 0.0, entropy, 64, 4.281, 85.24
10, 0.5, False, remove, 0.0, entropy, 64, 4.864, 85.64
10, 0.33, False, remove, 0.0, entropy, 64, 5.426, 85.50
10, 0.75, False, remove, 0.0, entropy, 64, 6.045, 85.97
10, 1.0, False, remove, 0.0, entropy, 64, 6.613, 86.57
10, 3.0, False, remove, 0.0, entropy, 64, 7.202, 87.24
10, 5.0, False, remove, 0.0, entropy, 64, 7.794, 87.04
---BEST SPA(s) FOUND
Best hyperparameters: {'INCLUDE_PREV_CONTEXT': False, 'GAMMA': 3.0, 'NB_TRAIN_ITERATIONS': 5, 'HANDLE_N_SETTING': 'remove', 'RATIO_PRETRAIN_TRAIN': 0.0, 'ENSEMBLE_TYPE': 'entropy', 'NUM_THREADS': 64, 'TRAINING_TIME': 5.545855820178986, 'VALIDATION ACCURACY': 0.8724114896459586}
-----TESTING
Final accuracy with best hyperparameters: 87.64
Mem in MB: 36.58
Mem in MB: 39.32
-----TIME PROFILING+
Read train + val data time:  0.21565
Number of training symbols: 5985500
Length of one training sequence: 500
Total training time: 52.210 seconds
Number of test sequences: 1497
Length of test sequence: 500
Read test data time:  0.01426
Total inference time: 1.622 seconds
Inference time/symbol: 2.167552886263243e-06 seconds
-----MEMORY REPORT
Filename: /data/home/nsagan/LZ-Genomics/Train.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   229    137.4 MiB    137.4 MiB           1   @profile
   230                                         def main(dataset_folder, pretrain_file):
   231                                             global INCLUDE_PREV_CONTEXT
   232                                             global GAMMA
   233                                             global NB_TRAIN_ITERATIONS 
   234                                             global HANDLE_N_SETTING 
   235                                             global RATIO_PRETRAIN_TRAIN 
   236                                             global ENSEMBLE_TYPE 
   237                                             global NUM_THREADS
   238                                             
   239                                             global include_prev_contexts
   240                                             global gammas 
   241                                             global nb_train_iterations 
   242                                             global handle_N_settings 
   243                                             global ratio_pretrain_train
   244                                             global ensemble_type
   245                                             global num_threads
   246                                         
   247    137.4 MiB      0.0 MiB           1       read_data_in_time = time.perf_counter()
   248                                             
   249                                             # Read train, val, test data 
   250    137.4 MiB      0.0 MiB           1       train_path = f"{dataset_folder}/train.csv"
   251    137.4 MiB      0.0 MiB           1       val_path = f"{dataset_folder}/dev.csv"
   252    137.4 MiB      0.0 MiB           1       test_path = f"{dataset_folder}/test.csv"
   253                                             
   254                                         
   255    145.1 MiB      7.8 MiB           1       train_data = pd.read_csv(train_path)
   256    145.8 MiB      0.6 MiB           1       validation_data = pd.read_csv(val_path)
   257                                             
   258    145.8 MiB      0.0 MiB           1       ALPHABET_SIZE = 4
   259    145.8 MiB      0.0 MiB           1       unique_labels = train_data['label'].unique()
   260                                             
   261    241.8 MiB      0.0 MiB           2       with open(pretrain_file, 'r') as file:
   262    241.8 MiB     96.0 MiB           1           pretrain_data = file.read()
   263                                             
   264                                             # Train all SPAs using all possible combinations of hyperparams
   265                                             # Test all on validation set, return best SPA
   266    241.8 MiB      0.0 MiB           1       results_df = pd.DataFrame(columns=[
   267                                             "INCLUDE_PREV_CONTEXT", "GAMMA", "NB_TRAIN_ITERATIONS", 
   268                                             "HANDLE_N_SETTING", "RATIO_PRETRAIN_TRAIN", "ENSEMBLE_TYPE", "NUM_THREADS", "VALIDATION ACCURACY"
   269                                             ])
   270                                         
   271    241.8 MiB      0.0 MiB           1       print("-----TRAINING")
   272    241.8 MiB      0.0 MiB           1       print("---SEARCH FOR BEST SPA(s)")
   273    241.8 MiB      0.0 MiB           1       print("nb_iterations , gamma, include_prev_context, handle_N_setting, ratio, ensemble type, num_threads, time taken, accuracy", flush=True)
   274    241.8 MiB      0.0 MiB           1       train_start_time = time.perf_counter()
   275    537.7 MiB      0.0 MiB           3       for include_prev_context, handle_N_setting, ratio in itertools.product(
   276    241.8 MiB      0.0 MiB           1           include_prev_contexts, handle_N_settings, ratio_pretrain_train
   277                                             ):  
   278    241.8 MiB      0.0 MiB           1           INCLUDE_PREV_CONTEXT = include_prev_context
   279    241.8 MiB      0.0 MiB           1           GAMMA = gammas
   280    241.8 MiB      0.0 MiB           1           NB_TRAIN_ITERATIONS = 0
   281    241.8 MiB      0.0 MiB           1           HANDLE_N_SETTING = handle_N_setting
   282    241.8 MiB      0.0 MiB           1           RATIO_PRETRAIN_TRAIN = ratio 
   283    241.8 MiB      0.0 MiB           1           ENSEMBLE_TYPE = ensemble_type
   284    241.8 MiB      0.0 MiB           1           NUM_THREADS = num_threads
   285                                                 
   286    251.3 MiB      9.6 MiB           1           train_data = handle_N(train_data, setting=HANDLE_N_SETTING)
   287    251.4 MiB      0.0 MiB           1           validation_data = handle_N(validation_data)
   288    251.4 MiB      0.0 MiB           1           nb_train_seqs = len(train_data)
   289    251.4 MiB      0.0 MiB           1           seq_len = len(train_data.iloc[0, 0])
   290    251.4 MiB      0.0 MiB           1           nb_train_symbols = nb_train_seqs * seq_len
   291                                                 
   292                                                 # Create list of spas based on number of labels: (spa_0 and spa_1 for labels 0, 1)
   293    251.4 MiB      0.0 MiB           5           spa = [LZ78SPA(alphabet_size=ALPHABET_SIZE, compute_training_loss=False) for _ in unique_labels]
   294    251.4 MiB      0.0 MiB           3           for i in range(len(unique_labels)):
   295    251.4 MiB      0.0 MiB           4               spa[i].set_inference_config(
   296    251.4 MiB      0.0 MiB           2                   lb=1e-5,
   297    251.4 MiB      0.0 MiB           2                   ensemble_type="entropy",
   298    251.4 MiB      0.0 MiB           2                   ensemble_n=10,
   299    251.4 MiB      0.0 MiB           2                   backshift_parsing=True,
   300    251.4 MiB      0.0 MiB           2                   backshift_ctx_len=20,
   301    251.4 MiB      0.0 MiB           2                   backshift_break_at_phrase=True
   302                                                     )
   303                                         
   304    251.4 MiB      0.0 MiB           1           nb_pretrain_symbols = math.ceil(RATIO_PRETRAIN_TRAIN * nb_train_symbols)
   305    251.4 MiB      0.0 MiB           1           pretrain_spa(pretrain_data, spa, nb_pretrain_symbols) 
   306                                         
   307    251.4 MiB      0.0 MiB           1           iterated_times = 0
   308    537.7 MiB     -0.2 MiB           6           for nb_iterations in nb_train_iterations:
   309    496.2 MiB      0.0 MiB           5               train_one_iter_start_time = time.perf_counter()
   310    537.8 MiB      0.0 MiB          15               for _ in range(nb_iterations - iterated_times):
   311    537.8 MiB    282.7 MiB          10                   train_spa_oneIter(train_data, spa)
   312                                                     
   313    537.8 MiB      0.0 MiB           5               iterated_times = nb_iterations
   314    537.8 MiB     -2.0 MiB          40               for gamma in gammas:
   315    537.8 MiB     -4.1 MiB          70                   for ensemble in ENSEMBLE_TYPE:
   316                                                         # Test on validation test to assess this combination of hyperparams
   317    537.8 MiB     -5.8 MiB         105                       for index in range(len(spa)):
   318    537.8 MiB     -3.9 MiB          70                           spa[index].set_inference_config(gamma=gamma, ensemble_type=ensemble)
   319    537.7 MiB      0.6 MiB          35                       accuracy = test_seq(validation_data, spa, num_threads)
   320    537.7 MiB     -2.3 MiB          35                       train_one_iter_end_time = time.perf_counter()
   321    537.7 MiB     -2.3 MiB          35                       train_one_iter_duration = train_one_iter_end_time - train_one_iter_start_time
   322    537.7 MiB     -2.3 MiB          35                       print(f"{nb_iterations}, {gamma}, {include_prev_context}, {handle_N_setting}, {ratio}, {ensemble}, {NUM_THREADS}, {train_one_iter_duration:.3f}, {(accuracy * 100):.2f}", flush=True)
   323                                         
   324                                                         
   325                                                         
   326    537.7 MiB     -4.3 MiB          70                       current_result = pd.DataFrame([{
   327    537.7 MiB     -2.4 MiB          35                           "INCLUDE_PREV_CONTEXT": INCLUDE_PREV_CONTEXT,
   328    537.7 MiB     -2.3 MiB          35                           "GAMMA": gamma,
   329    537.7 MiB     -2.3 MiB          35                           "NB_TRAIN_ITERATIONS": nb_iterations,
   330    537.7 MiB     -2.3 MiB          35                           "HANDLE_N_SETTING": HANDLE_N_SETTING,
   331    537.7 MiB     -2.3 MiB          35                           "RATIO_PRETRAIN_TRAIN": RATIO_PRETRAIN_TRAIN,
   332    537.7 MiB     -2.3 MiB          35                           "ENSEMBLE_TYPE": ensemble,
   333    537.7 MiB     -2.3 MiB          35                           "NUM_THREADS": NUM_THREADS,
   334    537.7 MiB     -2.3 MiB          35                           "TRAINING_TIME": train_one_iter_duration, 
   335    537.7 MiB     -2.3 MiB          35                           "VALIDATION ACCURACY": accuracy
   336                                                             }])
   337                                         
   338                                                         # Concatenate the current result with results_df
   339    537.7 MiB     -1.9 MiB          35                   results_df = results_df.dropna(axis=1, how='all')
   340    537.7 MiB     -1.6 MiB          35                   current_result = current_result.dropna(axis=1, how='all')
   341                                         
   342    537.7 MiB     -1.9 MiB          35                   results_df = pd.concat([results_df, current_result], ignore_index=True)
   343                                         
   344                                             
   345                                             # Find the best hyperparameter combination based on the highest accuracy
   346    537.7 MiB      0.0 MiB           1       print("---BEST SPA(s) FOUND")
   347    537.7 MiB      0.0 MiB           1       best_row = results_df.loc[results_df['VALIDATION ACCURACY'].idxmax()]
   348    537.7 MiB      0.0 MiB           1       best_params = best_row.to_dict()
   349    537.7 MiB      0.0 MiB           1       print("Best hyperparameters:", best_params)
   350                                         
   351                                             # Retrain and test using the best hyperparameters
   352    537.7 MiB      0.0 MiB           1       INCLUDE_PREV_CONTEXT = best_params["INCLUDE_PREV_CONTEXT"]
   353    537.7 MiB      0.0 MiB           1       GAMMA = best_params["GAMMA"]
   354    537.7 MiB      0.0 MiB           1       NB_TRAIN_ITERATIONS = int(best_params["NB_TRAIN_ITERATIONS"])
   355    537.7 MiB      0.0 MiB           1       HANDLE_N_SETTING = best_params["HANDLE_N_SETTING"]
   356    537.7 MiB      0.0 MiB           1       RATIO_PRETRAIN_TRAIN = best_params["RATIO_PRETRAIN_TRAIN"]
   357    537.7 MiB      0.0 MiB           1       ENSEMBLE_TYPE = best_params["ENSEMBLE_TYPE"]
   358    537.7 MiB      0.0 MiB           1       NUM_THREADS = best_params["NUM_THREADS"]
   359                                         
   360                                             # Retrain our best SPAs and use that to test on test data 
   361    537.7 MiB   -240.8 MiB           5       spa = [LZ78SPA(alphabet_size=ALPHABET_SIZE, gamma= GAMMA, compute_training_loss=False) for _ in unique_labels]
   362    297.0 MiB   -240.8 MiB           3       for i in range(len(unique_labels)):
   363    297.0 MiB      0.0 MiB           4           spa[i].set_inference_config(
   364    297.0 MiB      0.0 MiB           2               lb=1e-5,
   365    297.0 MiB      0.0 MiB           2               ensemble_type= ENSEMBLE_TYPE,
   366    297.0 MiB      0.0 MiB           2               ensemble_n=10,
   367    297.0 MiB      0.0 MiB           2               backshift_parsing=True,
   368    297.0 MiB      0.0 MiB           2               backshift_ctx_len=20,
   369    297.0 MiB      0.0 MiB           2               backshift_break_at_phrase=True
   370                                                 )
   371                                         
   372    297.1 MiB      0.1 MiB           1       train_data = handle_N(train_data, setting=HANDLE_N_SETTING)
   373    297.1 MiB      0.0 MiB           1       nb_train_seqs = len(train_data)
   374    297.1 MiB      0.0 MiB           1       seq_len = len(train_data.iloc[0, 0])
   375    297.1 MiB      0.0 MiB           1       nb_train_symbols = nb_train_seqs * seq_len
   376    297.1 MiB      0.0 MiB           1       nb_pretrain_symbols = math.ceil(RATIO_PRETRAIN_TRAIN * nb_train_symbols)
   377                                         
   378    297.1 MiB      0.0 MiB           1       pretrain_spa(pretrain_data, spa, nb_pretrain_symbols) 
   379    394.3 MiB     97.2 MiB           1       train_spa(train_data, spa, iterations=NB_TRAIN_ITERATIONS)
   380                                         
   381    394.3 MiB      0.0 MiB           1       train_end_time = time.perf_counter()
   382    394.3 MiB      0.0 MiB           1       train_duration = train_end_time - train_start_time
   383                                         
   384                                             
   385                                             
   386                                             # Final test
   387    394.3 MiB      0.0 MiB           1       print("-----TESTING")
   388    394.3 MiB      0.0 MiB           1       read_test_data_start_time = time.perf_counter()
   389    394.3 MiB      0.0 MiB           1       test_data = pd.read_csv(test_path)
   390                                         
   391    394.3 MiB      0.0 MiB           1       inference_start_time = time.perf_counter()
   392                                         
   393    394.3 MiB      0.0 MiB           1       test_data = handle_N(test_data)
   394    394.3 MiB      0.0 MiB           1       test_accuracy = test_seq(test_data, spa, NUM_THREADS)
   395                                         
   396    394.3 MiB      0.0 MiB           1       inference_end_time = time.perf_counter()
   397    394.3 MiB      0.0 MiB           1       print(f"Final accuracy with best hyperparameters: {(test_accuracy*100):.2f}")
   398                                             
   399                                                 
   400    394.3 MiB      0.0 MiB           1       inference_duration = inference_end_time - inference_start_time
   401                                         
   402    394.3 MiB      0.0 MiB           1       label = 0
   403    460.9 MiB      0.0 MiB           3       for sp in spa:
   404    460.9 MiB     66.6 MiB           2           spa_bytes = bytearray(sp.to_bytes())
   405    460.9 MiB      0.0 MiB           2           print(f"Mem in MB: {len(spa_bytes) / (1024 * 1024):.2f}", flush=True)
   406    460.9 MiB      0.0 MiB           2           makedirs("best_spas", exist_ok=True)
   407                                                 # Extract the part after 'GUE/' and replace slashes with underscores
   408    460.9 MiB      0.0 MiB           2           binary_file_name = dataset_folder.split("GUE/", 1)[-1].replace("/", "_")
   409                                                 
   410                                                 # Create the full path for the binary file
   411    460.9 MiB      0.0 MiB           2           binary_file_path = os.path.join("best_spas/minimal", f"{binary_file_name}_{label}.bin")
   412    460.9 MiB      0.0 MiB           2           label += 1
   413                                                 # Save the binary file
   414    460.9 MiB      0.0 MiB           4           with open(binary_file_path, 'wb') as file:
   415    460.9 MiB      0.0 MiB           2               file.write(spa_bytes)
   416                                             
   417                                         
   418    460.9 MiB      0.0 MiB           1       print("-----TIME PROFILING+")
   419    460.9 MiB      0.0 MiB           1       print(f"Read train + val data time: {(train_start_time - read_data_in_time): .5f}")
   420    460.9 MiB      0.0 MiB           1       print(f"Number of training symbols: {nb_train_symbols}")
   421    460.9 MiB      0.0 MiB           1       print(f"Length of one training sequence: {len(train_data.iloc[0, 0])}")
   422    460.9 MiB      0.0 MiB           1       print(f"Total training time: {train_duration:.3f} seconds")
   423                                             
   424                                         
   425    460.9 MiB      0.0 MiB           1       print(f"Number of test sequences: {len(test_data)}")
   426    460.9 MiB      0.0 MiB           1       print(f"Length of test sequence: {len(test_data.iloc[0, 0])}")
   427    460.9 MiB      0.0 MiB           1       print(f"Read test data time: {(inference_start_time - read_test_data_start_time): .5f}")
   428    460.9 MiB      0.0 MiB           1       print(f"Total inference time: {inference_duration:.3f} seconds")
   429    460.9 MiB      0.0 MiB           1       print(f"Inference time/symbol: {inference_duration/(len(test_data) * len(test_data.iloc[0, 0]))} seconds")
   430                                         
   431    460.9 MiB      0.0 MiB           1       print("-----MEMORY REPORT")


