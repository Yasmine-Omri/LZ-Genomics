-----TRAINING
---SEARCH FOR BEST SPA(s)
nb_iterations , gamma, include_prev_context, handle_N_setting, ratio, ensemble type, num_threads, time taken, accuracy
1, 0.1, False, remove, 0.0, entropy, 64, 0.144, 71.29
1, 0.5, False, remove, 0.0, entropy, 64, 0.221, 73.57
1, 0.33, False, remove, 0.0, entropy, 64, 0.280, 73.08
1, 0.75, False, remove, 0.0, entropy, 64, 0.344, 74.39
1, 1.0, False, remove, 0.0, entropy, 64, 0.409, 74.55
1, 3.0, False, remove, 0.0, entropy, 64, 0.474, 77.49
1, 5.0, False, remove, 0.0, entropy, 64, 0.539, 77.32
3, 0.1, False, remove, 0.0, entropy, 64, 0.303, 72.10
3, 0.5, False, remove, 0.0, entropy, 64, 0.372, 75.37
3, 0.33, False, remove, 0.0, entropy, 64, 0.442, 74.71
3, 0.75, False, remove, 0.0, entropy, 64, 0.504, 75.86
3, 1.0, False, remove, 0.0, entropy, 64, 0.579, 77.32
3, 3.0, False, remove, 0.0, entropy, 64, 0.650, 78.63
3, 5.0, False, remove, 0.0, entropy, 64, 0.723, 78.30
5, 0.1, False, remove, 0.0, entropy, 64, 0.308, 72.59
5, 0.5, False, remove, 0.0, entropy, 64, 0.385, 73.74
5, 0.33, False, remove, 0.0, entropy, 64, 0.469, 73.25
5, 0.75, False, remove, 0.0, entropy, 64, 0.539, 73.57
5, 1.0, False, remove, 0.0, entropy, 64, 0.614, 73.57
5, 3.0, False, remove, 0.0, entropy, 64, 0.684, 77.49
5, 5.0, False, remove, 0.0, entropy, 64, 0.755, 78.14
7, 0.1, False, remove, 0.0, entropy, 64, 0.322, 72.76
7, 0.5, False, remove, 0.0, entropy, 64, 0.397, 74.88
7, 0.33, False, remove, 0.0, entropy, 64, 0.472, 73.57
7, 0.75, False, remove, 0.0, entropy, 64, 0.544, 74.88
7, 1.0, False, remove, 0.0, entropy, 64, 0.616, 75.53
7, 3.0, False, remove, 0.0, entropy, 64, 0.687, 76.51
7, 5.0, False, remove, 0.0, entropy, 64, 0.758, 77.81
10, 0.1, False, remove, 0.0, entropy, 64, 0.449, 70.15
10, 0.5, False, remove, 0.0, entropy, 64, 0.525, 72.92
10, 0.33, False, remove, 0.0, entropy, 64, 0.596, 72.10
10, 0.75, False, remove, 0.0, entropy, 64, 0.673, 74.06
10, 1.0, False, remove, 0.0, entropy, 64, 0.760, 74.55
10, 3.0, False, remove, 0.0, entropy, 64, 0.839, 75.53
10, 5.0, False, remove, 0.0, entropy, 64, 0.912, 76.84
---BEST SPA(s) FOUND
Best hyperparameters: {'INCLUDE_PREV_CONTEXT': False, 'GAMMA': 3.0, 'NB_TRAIN_ITERATIONS': 3, 'HANDLE_N_SETTING': 'remove', 'RATIO_PRETRAIN_TRAIN': 0.0, 'ENSEMBLE_TYPE': 'entropy', 'NUM_THREADS': 64, 'TRAINING_TIME': 0.6498916177079082, 'VALIDATION ACCURACY': 0.7862969004893964}
-----TESTING
Final accuracy with best hyperparameters: 75.04
Mem in MB: 1.60
Mem in MB: 1.60
-----TIME PROFILING+
Read train + val data time:  0.14226
Number of training symbols: 343280
Length of one training sequence: 70
Total training time: 7.310 seconds
Number of test sequences: 613
Length of test sequence: 70
Read test data time:  0.00601
Total inference time: 0.298 seconds
Inference time/symbol: 6.94867731811033e-06 seconds
-----MEMORY REPORT
Filename: /data/home/nsagan/LZ-Genomics/Train.py

Line #    Mem usage    Increment  Occurrences   Line Contents
=============================================================
   229    138.2 MiB    138.2 MiB           1   @profile
   230                                         def main(dataset_folder, pretrain_file):
   231                                             global INCLUDE_PREV_CONTEXT
   232                                             global GAMMA
   233                                             global NB_TRAIN_ITERATIONS 
   234                                             global HANDLE_N_SETTING 
   235                                             global RATIO_PRETRAIN_TRAIN 
   236                                             global ENSEMBLE_TYPE 
   237                                             global NUM_THREADS
   238                                             
   239                                             global include_prev_contexts
   240                                             global gammas 
   241                                             global nb_train_iterations 
   242                                             global handle_N_settings 
   243                                             global ratio_pretrain_train
   244                                             global ensemble_type
   245                                             global num_threads
   246                                         
   247    138.2 MiB      0.0 MiB           1       read_data_in_time = time.perf_counter()
   248                                             
   249                                             # Read train, val, test data 
   250    138.2 MiB      0.0 MiB           1       train_path = f"{dataset_folder}/train.csv"
   251    138.2 MiB      0.0 MiB           1       val_path = f"{dataset_folder}/dev.csv"
   252    138.2 MiB      0.0 MiB           1       test_path = f"{dataset_folder}/test.csv"
   253                                             
   254                                         
   255    140.0 MiB      1.8 MiB           1       train_data = pd.read_csv(train_path)
   256    140.0 MiB      0.0 MiB           1       validation_data = pd.read_csv(val_path)
   257                                             
   258    140.0 MiB      0.0 MiB           1       ALPHABET_SIZE = 4
   259    140.7 MiB      0.6 MiB           1       unique_labels = train_data['label'].unique()
   260                                             
   261    236.1 MiB      0.0 MiB           2       with open(pretrain_file, 'r') as file:
   262    236.1 MiB     95.5 MiB           1           pretrain_data = file.read()
   263                                             
   264                                             # Train all SPAs using all possible combinations of hyperparams
   265                                             # Test all on validation set, return best SPA
   266    236.1 MiB      0.0 MiB           1       results_df = pd.DataFrame(columns=[
   267                                             "INCLUDE_PREV_CONTEXT", "GAMMA", "NB_TRAIN_ITERATIONS", 
   268                                             "HANDLE_N_SETTING", "RATIO_PRETRAIN_TRAIN", "ENSEMBLE_TYPE", "NUM_THREADS", "VALIDATION ACCURACY"
   269                                             ])
   270                                         
   271    236.1 MiB      0.0 MiB           1       print("-----TRAINING")
   272    236.1 MiB      0.0 MiB           1       print("---SEARCH FOR BEST SPA(s)")
   273    236.1 MiB      0.0 MiB           1       print("nb_iterations , gamma, include_prev_context, handle_N_setting, ratio, ensemble type, num_threads, time taken, accuracy", flush=True)
   274    236.1 MiB      0.0 MiB           1       train_start_time = time.perf_counter()
   275    259.5 MiB      0.0 MiB           3       for include_prev_context, handle_N_setting, ratio in itertools.product(
   276    236.1 MiB      0.0 MiB           1           include_prev_contexts, handle_N_settings, ratio_pretrain_train
   277                                             ):  
   278    236.1 MiB      0.0 MiB           1           INCLUDE_PREV_CONTEXT = include_prev_context
   279    236.1 MiB      0.0 MiB           1           GAMMA = gammas
   280    236.1 MiB      0.0 MiB           1           NB_TRAIN_ITERATIONS = 0
   281    236.1 MiB      0.0 MiB           1           HANDLE_N_SETTING = handle_N_setting
   282    236.1 MiB      0.0 MiB           1           RATIO_PRETRAIN_TRAIN = ratio 
   283    236.1 MiB      0.0 MiB           1           ENSEMBLE_TYPE = ensemble_type
   284    236.1 MiB      0.0 MiB           1           NUM_THREADS = num_threads
   285                                                 
   286    237.8 MiB      1.7 MiB           1           train_data = handle_N(train_data, setting=HANDLE_N_SETTING)
   287    237.8 MiB      0.0 MiB           1           validation_data = handle_N(validation_data)
   288    237.8 MiB      0.0 MiB           1           nb_train_seqs = len(train_data)
   289    237.8 MiB      0.0 MiB           1           seq_len = len(train_data.iloc[0, 0])
   290    237.8 MiB      0.0 MiB           1           nb_train_symbols = nb_train_seqs * seq_len
   291                                                 
   292                                                 # Create list of spas based on number of labels: (spa_0 and spa_1 for labels 0, 1)
   293    237.8 MiB      0.0 MiB           5           spa = [LZ78SPA(alphabet_size=ALPHABET_SIZE, compute_training_loss=False) for _ in unique_labels]
   294    237.8 MiB      0.0 MiB           3           for i in range(len(unique_labels)):
   295    237.8 MiB      0.0 MiB           4               spa[i].set_inference_config(
   296    237.8 MiB      0.0 MiB           2                   lb=1e-5,
   297    237.8 MiB      0.0 MiB           2                   ensemble_type="entropy",
   298    237.8 MiB      0.0 MiB           2                   ensemble_n=10,
   299    237.8 MiB      0.0 MiB           2                   backshift_parsing=True,
   300    237.8 MiB      0.0 MiB           2                   backshift_ctx_len=20,
   301    237.8 MiB      0.0 MiB           2                   backshift_break_at_phrase=True
   302                                                     )
   303                                         
   304    237.8 MiB      0.0 MiB           1           nb_pretrain_symbols = math.ceil(RATIO_PRETRAIN_TRAIN * nb_train_symbols)
   305    237.8 MiB      0.0 MiB           1           pretrain_spa(pretrain_data, spa, nb_pretrain_symbols) 
   306                                         
   307    237.8 MiB      0.0 MiB           1           iterated_times = 0
   308    259.5 MiB     -0.3 MiB           6           for nb_iterations in nb_train_iterations:
   309    258.1 MiB      0.0 MiB           5               train_one_iter_start_time = time.perf_counter()
   310    259.2 MiB      0.0 MiB          15               for _ in range(nb_iterations - iterated_times):
   311    259.2 MiB     17.8 MiB          10                   train_spa_oneIter(train_data, spa)
   312                                                     
   313    259.2 MiB      0.0 MiB           5               iterated_times = nb_iterations
   314    259.5 MiB     -1.7 MiB          40               for gamma in gammas:
   315    259.5 MiB     -3.3 MiB          70                   for ensemble in ENSEMBLE_TYPE:
   316                                                         # Test on validation test to assess this combination of hyperparams
   317    259.5 MiB     -4.8 MiB         105                       for index in range(len(spa)):
   318    259.5 MiB     -3.2 MiB          70                           spa[index].set_inference_config(gamma=gamma, ensemble_type=ensemble)
   319    259.5 MiB      1.7 MiB          35                       accuracy = test_seq(validation_data, spa, num_threads)
   320    259.5 MiB     -1.7 MiB          35                       train_one_iter_end_time = time.perf_counter()
   321    259.5 MiB     -1.7 MiB          35                       train_one_iter_duration = train_one_iter_end_time - train_one_iter_start_time
   322    259.5 MiB     -1.7 MiB          35                       print(f"{nb_iterations}, {gamma}, {include_prev_context}, {handle_N_setting}, {ratio}, {ensemble}, {NUM_THREADS}, {train_one_iter_duration:.3f}, {(accuracy * 100):.2f}", flush=True)
   323                                         
   324                                                         
   325                                                         
   326    259.5 MiB     -3.3 MiB          70                       current_result = pd.DataFrame([{
   327    259.5 MiB     -1.7 MiB          35                           "INCLUDE_PREV_CONTEXT": INCLUDE_PREV_CONTEXT,
   328    259.5 MiB     -1.7 MiB          35                           "GAMMA": gamma,
   329    259.5 MiB     -1.7 MiB          35                           "NB_TRAIN_ITERATIONS": nb_iterations,
   330    259.5 MiB     -1.7 MiB          35                           "HANDLE_N_SETTING": HANDLE_N_SETTING,
   331    259.5 MiB     -1.7 MiB          35                           "RATIO_PRETRAIN_TRAIN": RATIO_PRETRAIN_TRAIN,
   332    259.5 MiB     -1.7 MiB          35                           "ENSEMBLE_TYPE": ensemble,
   333    259.5 MiB     -1.7 MiB          35                           "NUM_THREADS": NUM_THREADS,
   334    259.5 MiB     -1.7 MiB          35                           "TRAINING_TIME": train_one_iter_duration, 
   335    259.5 MiB     -1.7 MiB          35                           "VALIDATION ACCURACY": accuracy
   336                                                             }])
   337                                         
   338                                                         # Concatenate the current result with results_df
   339    259.5 MiB     -1.6 MiB          35                   results_df = results_df.dropna(axis=1, how='all')
   340    259.5 MiB     -1.7 MiB          35                   current_result = current_result.dropna(axis=1, how='all')
   341                                         
   342    259.5 MiB     -1.4 MiB          35                   results_df = pd.concat([results_df, current_result], ignore_index=True)
   343                                         
   344                                             
   345                                             # Find the best hyperparameter combination based on the highest accuracy
   346    259.5 MiB      0.0 MiB           1       print("---BEST SPA(s) FOUND")
   347    259.5 MiB      0.0 MiB           1       best_row = results_df.loc[results_df['VALIDATION ACCURACY'].idxmax()]
   348    259.5 MiB      0.0 MiB           1       best_params = best_row.to_dict()
   349    259.5 MiB      0.1 MiB           1       print("Best hyperparameters:", best_params)
   350                                         
   351                                             # Retrain and test using the best hyperparameters
   352    259.5 MiB      0.0 MiB           1       INCLUDE_PREV_CONTEXT = best_params["INCLUDE_PREV_CONTEXT"]
   353    259.5 MiB      0.0 MiB           1       GAMMA = best_params["GAMMA"]
   354    259.5 MiB      0.0 MiB           1       NB_TRAIN_ITERATIONS = int(best_params["NB_TRAIN_ITERATIONS"])
   355    259.5 MiB      0.0 MiB           1       HANDLE_N_SETTING = best_params["HANDLE_N_SETTING"]
   356    259.5 MiB      0.0 MiB           1       RATIO_PRETRAIN_TRAIN = best_params["RATIO_PRETRAIN_TRAIN"]
   357    259.5 MiB      0.0 MiB           1       ENSEMBLE_TYPE = best_params["ENSEMBLE_TYPE"]
   358    259.5 MiB      0.0 MiB           1       NUM_THREADS = best_params["NUM_THREADS"]
   359                                         
   360                                             # Retrain our best SPAs and use that to test on test data 
   361    259.5 MiB    -12.5 MiB           5       spa = [LZ78SPA(alphabet_size=ALPHABET_SIZE, gamma= GAMMA, compute_training_loss=False) for _ in unique_labels]
   362    247.0 MiB    -12.5 MiB           3       for i in range(len(unique_labels)):
   363    247.0 MiB      0.0 MiB           4           spa[i].set_inference_config(
   364    247.0 MiB      0.0 MiB           2               lb=1e-5,
   365    247.0 MiB      0.0 MiB           2               ensemble_type= ENSEMBLE_TYPE,
   366    247.0 MiB      0.0 MiB           2               ensemble_n=10,
   367    247.0 MiB      0.0 MiB           2               backshift_parsing=True,
   368    247.0 MiB      0.0 MiB           2               backshift_ctx_len=20,
   369    247.0 MiB      0.0 MiB           2               backshift_break_at_phrase=True
   370                                                 )
   371                                         
   372    247.2 MiB      0.2 MiB           1       train_data = handle_N(train_data, setting=HANDLE_N_SETTING)
   373    247.2 MiB      0.0 MiB           1       nb_train_seqs = len(train_data)
   374    247.2 MiB      0.0 MiB           1       seq_len = len(train_data.iloc[0, 0])
   375    247.2 MiB      0.0 MiB           1       nb_train_symbols = nb_train_seqs * seq_len
   376    247.2 MiB      0.0 MiB           1       nb_pretrain_symbols = math.ceil(RATIO_PRETRAIN_TRAIN * nb_train_symbols)
   377                                         
   378    247.2 MiB      0.0 MiB           1       pretrain_spa(pretrain_data, spa, nb_pretrain_symbols) 
   379    254.8 MiB      7.6 MiB           1       train_spa(train_data, spa, iterations=NB_TRAIN_ITERATIONS)
   380                                         
   381    254.8 MiB      0.0 MiB           1       train_end_time = time.perf_counter()
   382    254.8 MiB      0.0 MiB           1       train_duration = train_end_time - train_start_time
   383                                         
   384                                             
   385                                             
   386                                             # Final test
   387    254.8 MiB      0.0 MiB           1       print("-----TESTING")
   388    254.8 MiB      0.0 MiB           1       read_test_data_start_time = time.perf_counter()
   389    254.8 MiB      0.0 MiB           1       test_data = pd.read_csv(test_path)
   390                                         
   391    254.8 MiB      0.0 MiB           1       inference_start_time = time.perf_counter()
   392                                         
   393    254.8 MiB      0.0 MiB           1       test_data = handle_N(test_data)
   394    254.7 MiB     -0.1 MiB           1       test_accuracy = test_seq(test_data, spa, NUM_THREADS)
   395                                         
   396    254.7 MiB      0.0 MiB           1       inference_end_time = time.perf_counter()
   397    254.7 MiB      0.0 MiB           1       print(f"Final accuracy with best hyperparameters: {(test_accuracy*100):.2f}")
   398                                             
   399                                                 
   400    254.7 MiB      0.0 MiB           1       inference_duration = inference_end_time - inference_start_time
   401                                         
   402    254.7 MiB      0.0 MiB           1       label = 0
   403    258.3 MiB      0.0 MiB           3       for sp in spa:
   404    258.3 MiB      3.6 MiB           2           spa_bytes = bytearray(sp.to_bytes())
   405    258.3 MiB      0.0 MiB           2           print(f"Mem in MB: {len(spa_bytes) / (1024 * 1024):.2f}", flush=True)
   406    258.3 MiB      0.0 MiB           2           makedirs("best_spas", exist_ok=True)
   407                                                 # Extract the part after 'GUE/' and replace slashes with underscores
   408    258.3 MiB      0.0 MiB           2           binary_file_name = dataset_folder.split("GUE/", 1)[-1].replace("/", "_")
   409                                                 
   410                                                 # Create the full path for the binary file
   411    258.3 MiB      0.0 MiB           2           binary_file_path = os.path.join("best_spas/minimal", f"{binary_file_name}_{label}.bin")
   412    258.3 MiB      0.0 MiB           2           label += 1
   413                                                 # Save the binary file
   414    258.3 MiB      0.0 MiB           4           with open(binary_file_path, 'wb') as file:
   415    258.3 MiB      0.0 MiB           2               file.write(spa_bytes)
   416                                             
   417                                         
   418    258.3 MiB      0.0 MiB           1       print("-----TIME PROFILING+")
   419    258.3 MiB      0.0 MiB           1       print(f"Read train + val data time: {(train_start_time - read_data_in_time): .5f}")
   420    258.3 MiB      0.0 MiB           1       print(f"Number of training symbols: {nb_train_symbols}")
   421    258.3 MiB      0.0 MiB           1       print(f"Length of one training sequence: {len(train_data.iloc[0, 0])}")
   422    258.3 MiB      0.0 MiB           1       print(f"Total training time: {train_duration:.3f} seconds")
   423                                             
   424                                         
   425    258.3 MiB      0.0 MiB           1       print(f"Number of test sequences: {len(test_data)}")
   426    258.3 MiB      0.0 MiB           1       print(f"Length of test sequence: {len(test_data.iloc[0, 0])}")
   427    258.3 MiB      0.0 MiB           1       print(f"Read test data time: {(inference_start_time - read_test_data_start_time): .5f}")
   428    258.3 MiB      0.0 MiB           1       print(f"Total inference time: {inference_duration:.3f} seconds")
   429    258.3 MiB      0.0 MiB           1       print(f"Inference time/symbol: {inference_duration/(len(test_data) * len(test_data.iloc[0, 0]))} seconds")
   430                                         
   431    258.3 MiB      0.0 MiB           1       print("-----MEMORY REPORT")


